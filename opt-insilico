#!/bin/bash

# Author: Tao Zhou - ostaotao@163.com

VERSION=1.0.1

usage(){
cat <<EOF
Usage:
  opt-insilico REF1.fa,REF2.fa,REF3.fa TARGET-READS_1.fq [TARGET-READS_2.fq]

Generate in-silico mate-pair (and paired-end) libraries for super-scaffolding
from target genome reads and the suitable reference from multiple references.
  -o   output directory [$OUT]
  -t   number of threads / parallel processes [$THREADS]
  -i   insert sizes, defaults: [$INSERTS]
  -d   trimmed dir, defaults: [$TRIMMED]
  -G   estimate genome size [$GENOMESIZE]
  -C   config file for SOAPdenovo [$CONFIGFILE]
  -k   kmer to use SOAPdenovo to assemble contigs,scaffolds [$KMER]
  -P   prefix of assembled contigs,scaffolds [$PREFIX]
  -e   existent reference of target species [$REFTARGET]
  -m   multiple references for insilico [$REF]
  -f   input fastq1 [$FASTQ1]
  -r   input fastq2 [$FASTQ2]
  -Q   folder of the quast evaluation [$QUASTFOLDER]
  -b   busco dataset [$BUSCODATASET]
  -B   folder of the busco evaluation [$BUSCOFOLDER]
  -l   read length [$LENGTH]
  -c   coverage of mate-pair libraries [$COVERAGE]
  -p   paired-end vs. mate-pair insert size threshold [$MPTHRESH]
       pairs with insert < -p will be fw/rev, pairs >= -p rev/fw
  -z   gzipped output libraries
  -s   write SOAP-denovo config for libraries to log
  -V   show script version
  -h   show this help
EOF
exit 0; }

INSERTS=500,1000,1500,2000,5000,10000,20000,50000,100000,200000
THREADS=30
OUT="optimized_insilico"
LENGTH=100
COVERAGE=10
PREFIX='genome'
KMER=55
BUSCODATASET='path/to/busco_datasets'
TRIMMED='trimmed'
QUASTFOLDER='QUAST_evaluation'
BUSCOFOLDER='BUSCO_evaluation'
FASTQ1='test_1.fq'
FASTQ2='test_2.fq'
MPTHRESH=1000
MODE="mp"
GZIP=0
SOAP=0

SCR=$(basename $0)

# Execute getopt and check opts/args
ARGS=`getopt -n "$SCR" -o "t:i:o:l:c:p:tr:G:C:k:P:Q:B:b:d:e:m:f:r:szhV" -- "$@"`
[ $? -ne 0 ] && exit 1; # Bad arguments
eval set -- "$ARGS"

while true; do
    case "$1" in
        -i) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); INSERTS="$2"; shift 2;;
        -t) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); THREADS="$2"; shift 2;;
        -o) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); OUT="$2"; shift 2;;
        -l) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); LENGTH="$2"; shift 2;;
        -c) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); COVERAGE="$2"; shift 2;;
        -d) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); TRIMMED="$2"; shift 2;; 
        -G) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); GENOMESIZE="$2"; shift 2;;
        -C) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); CONFIGFILE="$2"; shift 2;;
        -k) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); KMER="$2"; shift 2;;
        -P) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); PREFIX="$2"; shift 2;;
        -e) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); REFTARGET="$2"; shift 2;;
        -m) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); REF="$2"; shift 2;;
        -f) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); FASTQ1="$2"; shift 2;;
        -r) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); FASTQ2="$2"; shift 2;;
        -Q) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); QUASTFOLDER="$2"; shift 2;;
        -B) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); BUSCOFOLDER="$2"; shift 2;;
        -b) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); BUSCODATASET="$2"; shift 2;;
        -z) GZIP=1; shift 1;;
        -s) SOAP=1; shift 1;;
        -h) usage && exit 0;;
        -V) echo $VERSION && exit 0;;
        --) shift; break;;
    esac
done;


PRE=$(basename ${FASTQ1%_*});

folder1="1-preprocess"
folder2="2-SOAPdenovo_no_insilico"
folder3="3-best_ref"
folder4="4-crossmates"
folder5="5-evaluation"
folder6="6-SOAPdenovo_optimized_insilico"
contig_folder="contigs"
scaffold_folder="scaffolds"

#remove duplicates and trim adaptor,low-quality bases

function preprocess(){
    echo -e "\n1.remove duplicates"
    echo -e "==================="
    mkdir -p $OUT/$folder1
    #inputfq1="$1"
    if [ -z "$2" ];then
        seqkit rmdup $inputfq1 -s > $OUT/$folder1/${1%_*}-rmdup.fq
    else
        prinseq.pl -fastq $1 -fastq2 $2 -derep 14 -verbose -out_good  $OUT/$folder1/${1%_*} -out_bad $OUT/$folder1/bad -no_qual_header
        echo -e "\n2.trim adaptor and low-quality bases"
        echo -e "===================================="
        trim_galore --phred33 -o $OUT/$folder1/$3 --paired $OUT/$folder1/${1%.*}.fastq $OUT/$folder1/${2%.*}.fastq
    fi
}

#trimming reads using trim_galore

trim(){
    echo "2...trim adaptor and low-quality bases"
    if [ -n "$3" ];then 
        #inputfq2="$3"
        trim_galore --phred33 -o $OUT/$folder1/$1 --paired $folder1/${2%.*}-rmdup.fq $folder1/${3%.*}-rmdup.fq 
    fi
}

#assemble reads to contigs/scaffolds
write_config(){
    echo -e "\n3.1...write config file for SOAPdenovo"
    echo -e "======================================" 
    mkdir -p $OUT/$folder2
    echo -e "max_rd_len=$1"> $OUT/$folder2/${4%.*}-1.cfg
    echo -e "max_rd_len=$1"> $OUT/$folder2/${4%.*}-2.cfg
    local IFS=",";
    local RANK=0
    for i in $2;do
        RANK=$(($RANK+1));
        [ $i -lt $MPTHRESH ] && MODE=pe || MODE=mp;
        [ $i -lt $MPTHRESH ] && REV=0 || REV=1;
        [ $GZIP -gt 0 ] && SUF=.fq.gz || SUF=.fq
        if [ $i -lt 500 ]; then
            r1=$OUT/$folder1/$TRIMMED/${FASTQ1%.*}.fq
            r2=$OUT/$folder1/$TRIMMED/${FASTQ2%.*}.fq
            if [ -z $r2 ];then
                echo -e "\n[LIB]\navg_ins=$i\nreverse_seq=$REV\nasm_flags=3\nrank=$RANK\nq1=$r1\nq2=$r2">>$OUT/$folder2/${4%.*}-1.cfg
                echo -e "\n[LIB]\navg_ins=$i\nreverse_seq=$REV\nasm_flags=1\nrank=$RANK\nq1=$r1\nq2=$r2">>$OUT/$folder2/${4%.*}-2.cfg
            else
                echo -e "\n[LIB]\navg_ins=$i\nreverse_seq=$REV\nasm_flags=3\nrank=$RANK\nq1=$r1">>$OUT/$folder2/${4%.*}-1.cfg
                echo -e "\n[LIB]\navg_ins=$i\nreverse_seq=$REV\nasm_flags=1\nrank=$RANK\nq1=$r1">>$OUT/$folder2/${4%.*}-2.cfg
            fi  
        else
            R1=$OUT/$folder4/"$PRE-$MODE-$i""_1""$SUF";
            R2=$OUT/$folder4/"$PRE-$MODE-$i""_2""$SUF";
            echo -e "\n[LIB]\navg_ins=$i\nreverse_seq=$REV\nasm_flags=2\nrank=$RANK\nq1=$R1\nq2=$R2">>$OUT/$folder2/${4%.*}-2.cfg
        fi
    done;
    echo -e "already write the config files "
}

assemble2contigs(){
    echo -e "\n3.2...assemble reads to contigs/scaffolds"
    echo -e "========================================="
    config="$1"
    kmer="$2"
    genome_size="$3"
    thread="$4"
    prefix="$5"
    mkdir -p $OUT/$folder2/$contig_folder
    mkdir -p $OUT/$folder2/$scaffold_folder
    SOAPdenovo-63mer sparse_pregraph -g 15 -d 4 -e 4 -R -r 0 -s $OUT/$folder2/${config%.*}-1.cfg -K $kmer -z $genome_size -p $thread -o $OUT/$folder2/$contig_folder/$prefix
    SOAPdenovo-63mer contig -g $OUT/$folder2/$contig_folder/$prefix -M 1 -p $thread
    cp $OUT/$folder2/$contig_folder/$prefix* $OUT/$folder2/$scaffold_folder
    SOAPdenovo-63mer map -s $OUT/$folder2/${config%.*}-1.cfg -K $kmer -p $thread -g $OUT/$folder2/$scaffold_folder/$prefix
    SOAPdenovo-63mer scaff -p $thread -g $OUT/$folder2/$scaffold_folder/$prefix
}

#choose the "best" reference to generate insilico mate-pairs
best_reference(){
    echo -e "\n4.1 find "best" reference from multiple references"
    echo -e "=================================================="
    mkdir -p $OUT/$folder3
    #prefix="$1";ref="$2";
    #coverage="$3";length="$4";thread="$5";insert="$6";fastq1="$7";fastq2="$8"
    #local IFS=",";
    for i in $2;do
        unimap -cxasm20 -t 20 $i $OUT/$folder2/$scaffold_folder/$1"".scafSeq > $OUT/$folder3/$1-$i"".unimap  
    done;
    opt-insilico.py -s compare_ref -input_folder $OUT/$folder3/ -suf unimap -output $OUT/$folder3/best_ref.txt
    species=$(sed -n "2,1p" $OUT/$folder3/best_ref.txt | awk '{print $1}')
    unimap_file="genome-$species"".unimap"
    #unimap_file="genome-takifugu_flavidus.fa.masked.unimap"
    opt-insilico.py -s paf2list -uf $OUT/$folder3/$unimap_file
    opt-insilico.py -s get_length -uf $OUT/$folder3/$unimap_file -output $OUT/$folder3/length-flavidus.txt
    opt-insilico.py -s get_fa -fa $OUT/$folder2/$scaffold_folder/$1"".scafSeq -input1 $OUT/$folder3/length.txt -output $OUT/$folder3/${species%%.}-cns.fa
}

get_consensus(){
    echo -e "\n4.2 get consensus from multiple references"
    echo -e "=================================================="
    mkdir -p $OUT/
    unimap -cxasm20 -t 20 $i $OUT/$folder2/$scaffold_folder/$1"".scafSeq > $OUT/$folder3/$1-$i"".unimap
}

cross_mates(){
    best_ref=$(sed -n "2,1p" $OUT/$folder3/best_ref.txt | awk '{print $1}')
    cat $OUT/$folder3/best_ref.txt | while read line; do echo $line; done;
    mkdir -p $OUT/$folder4
    echo -e "\n4.2 generating mate-pairs from the "best" references"
    echo -e "=================================================="    
    cross-mates -c $1 -l $2 -t $3 -i $4 -o $OUT/$folder4 $best_ref $OUT/$folder1/$TRIMMED/${5%.*}""_val_1.fq $OUT/$folder1/$TRIMMED/${6%.*}""_val_2.fq
}

cross_mates2(){   
    echo -e "\n4.2 generating mate-pairs from the "best" references2"
    echo -e "=================================================="
    fasta=$(ls $OUT/$folder3/*-cns.fa)
    mkdir -p $OUT/$folder6
    local IFS=",";
    for i in $1;do
        [ $i -lt $MPTHRESH ] && MODE=pe || MODE=mp;
        seq-frag $MODE -p -s -i $i -N 0 -l $2 -c $3 <$fasta | interleaved-split 1>$OUT/$folder4/$PRE-$MODE-$i""_1.fq 2>$OUT/$folder4/$PRE-$MODE-$i""_2.fq 
    done;
}

#improve the assembly using generated insilico mate-pairs
contigs2scaffold(){
    echo "5...assemble the contigs to scaffolds"
    #prefix="$1";thread="$2";config="$3";kmer="$4"    
    cp $OUT/$folder2/$contig_folder/$1* $OUT/$folder6
    SOAPdenovo-63mer map -g $OUT/$folder6/$1 -p $2 -s $OUT/$folder2/${3%.*}-2.cfg -K $4
    SOAPdenovo-63mer scaff -g $OUT/$folder6/$1 -p $2
}

#evaluate the assembly using quast,busco
evaluation(){
    echo "6...evaluate the assembly using quast/busco"
    thread="$1";bestref="$2";quast_folder="$3";prefix="$4";busco_dataset="$5";busco_folder="$6"
    quast.py -t $1 -R $2 -o $3 $4
    busco -i genome.scafSeq -l $5 -o $6 -m genome --cpu 15
}

preprocess $FASTQ1 $FASTQ2 $TRIMMED
write_config $LENGTH $INSERTS $OUT $CONFIGFILE
assemble2contigs $CONFIGFILE $KMER $GENOMESIZE $THREADS $PREFIX
best_reference $PREFIX $REF
cross_mates $COVERAGE $LENGTH $THREADS $INSERTS $FASTQ1 $FASTQ2
#cross_mates2 $INSERTS $LENGTH $COVERAGE
contigs2scaffold $PREFIX $THREADS $CONFIGFILE $KMER
evaluation $THREADS $BESTREF $QUASTFOLDER $PREFIX $BUSCODATASETS $BUSCOFOLDER
